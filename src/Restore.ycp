/**
 * File:
 *   modules/Restore.ycp
 *
 * Package:
 *   Restore module
 *
 * Summary:
 *   Data for configuration of restore, input and output functions.
 *
 * Authors:
 *   Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of restore.
 * Input and output routines.
 *
 */

{
    // This is "Restore" module
    module "Restore";

    import "Progress";
    import "Report";
    import "Mode";
    import "Summary";

    import "Lilo";
    include "lilo/routines.ycp";
    include "lilo/io.ycp";

    textdomain "restore";

    // local file name (can be on mounted file system)
    string filename = "";

    // entered file name (e.g. nfs://server:/dir/archive.tar)
    global string inputname = "";

    // list of volumes in URL-like syntax
    list inputvolumes = [];

    // contents of archive
    list archivefiles = [];

    // installed packages at backup time
    map installedpkgs = $[];

    // list of installed packages
    map actualinstalledpackages = $[];

    // restoration archive and selection
    // "vers" : "version", "files" : ["files"], "prefix" : "prefix", "descr" : "description", "sel_type" : "X", "sel_file" : [""]
    map archive_info = $[];

    // information stored in archive
    string date = "";
    string hostname = "";
    string comment = "";

    // list of files
    list volumeparts = [];

    // temporary directory
    string tempdir = "";

    // mount point, stored for unmounting
    string mountpoint = "";

    //
    string nopackage_id = "_NoPackage_";

    /**
     * Run lilo after files are restored
     */
    global boolean runbootloader = true;

    /**
     * Run SuSEconfig after files are restored
     */
    global boolean runSuSEconfig = true;

    /**
     * Rewrite RPM db - unapack /var/lib/rpm/* files from backup if present
     */
    global boolean restoreRPMdb = false;


    /**
     * Selected archive has more parts
     * @return boolen True if archive have more than one part.
     */
    global define boolean IsMultiVolume() ``{
	return (size(volumeparts) > 0);
    }

    /**
     * Return date when backup archive was created. Date is stored in archive in file info/date.
     * @return string Date
     */
    global define string GetArchiveDate() ``{
	return date;
    }

    /**
     * Return name of backup archive
     * @return string Input name file name
     */
    global define string GetInputName() ``{
	return inputname;
    }

    /**
     * Return name of backup archive
     * @return string File name
     */
    global define string GetArchiveName() ``{
	return filename;
    }

    /**
     * Return user comment stored in archive. Comment is stored in file info/comment.
     * @return string Archive comment
     */
    global define string GetArchiveComment() ``{
	return comment;
    }

    /**
     * Return host name of machine on which backup archive was created. Host name is stored in archive in file info/hostname.
     * @return string Host name
     */
    global define string GetArchiveHostname() ``{
	return hostname;
    }

    /**
     * Return map with packages installed at backup time (form is $["package name" : "version"]).
     * @return map Installed packages at backup time
     */
    global define map GetArchiveInstalledPackages() ``{
	return installedpkgs;
    }

    /**
     * Return list of files in the backup archive
     * @return list Files in the archive
     */
    global define list GetArchiveFiles() ``{
	return archivefiles;
    }


    /**
     * Return missing packages (packages which were installed at backup time, but at restore time they are not installed)
     * @return map Map $[ "packagename" : $[ "ver" : "version", "descr" : "Short description of the package"]], key description is present only if decription exists
     */
    global define map GetMissingPackages() ``{
	map ret = $[];

	GetActualInstalledPackages();

	// filter actual installed packages out
	ret = filter(string p, string v, installedpkgs, ``{
		return (haskey(actualinstalledpackages, p) != true);
	    }
	);

	// add descriptions
	ret = mapmap(string pkg, string version, ret, ``{
		string descr = (Mode::test == false) ? Pkg::PkgSummary(pkg) : "";

		if (descr == nil)
		{
		    return [pkg, $["ver" : version]];
		}
		else
		{
		    return [pkg, $["ver" : version, "descr" : descr ]];
		}
	    }
	);

	return ret;
    }

    /**
     * Return extra packages (packages which are installed at restore time, but at restore time they are installed)
     * @return map Map $[ "packagename" : $[ "ver" : "version", "descr" : "Short description of the package"]], key description is present only if decription exists
     */
    global define map GetExtraPackages() ``{
	map ret = $[];

	GetActualInstalledPackages();

	// filter actual installed packages out
	ret = filter(string p, string v, actualinstalledpackages, ``{
		return (haskey(installedpkgs, p) != true);
	    }
	);

	// add descriptions
	ret = mapmap(string pkg, string version, ret, ``{
		string descr = (Mode::test == false) ? Pkg::PkgSummary(pkg) : "";

		if (descr == nil)
		{
		    return [pkg, $["ver" : version]];
		}
		else
		{
		    return [pkg, $["ver" : version, "descr" : descr ]];
		}
	    }
	);

	return ret;
    }

    /**
     * Return packages which have different version at backup archive and in system
     * @return map Map $[ "packagename" : $[ "inst": "installed version", "ver" : "version at backup time, "descr" : "Short description of the package"]], key description is present only if decription exists
     */
    global define map GetMismatchedPackages() ``{
	map ret = $[];

	GetActualInstalledPackages();

	foreach(string p, string v, actualinstalledpackages, ``{
		if (haskey(installedpkgs, p) == true)
		{
		    string backupversion = lookup(installedpkgs, p, "");

		    if (backupversion != v)
		    {
			string descr = (Mode::test == false) ? Pkg::PkgSummary(p) : "";

			ret = (descr != nil) ? add(ret, p, $["ver": backupversion, "inst" : v, "descr" : descr]) :
			    add(ret, p, $["ver": backupversion, "inst" : v]);
		    }
		}
	    }
	);

	return ret;
    }

    /**
     * Returns selected packages (even partially).
     * @return map Map with same keys as map returned by GetArchiveInfo()
     */

    global define map GetSelectedPackages() ``{
	map ret = $[];

	if (archive_info != nil)
	{
	    // filter out unselected packages
	    ret = filter(string p, map info, archive_info, ``{
		    string sel_type = lookup(info, "sel_type", " ");

		    if (sel_type == "X" || sel_type == "P")
		    {
			return true;
		    }
		    else
		    {
			return false;
		    }
		}
	    );
	}

	return ret;
    }

    /**
     * Return installed packages. Result is cached in Restore module, so only first use takes long time
     * @return map Map $[ "packagename" : "version" ]
     */
    global define map GetActualInstalledPackages() ``{
	if (actualinstalledpackages == $[] || actualinstalledpackages == nil)
	{
	    actualinstalledpackages = ReadActualInstalledPackages();
	}

	return actualinstalledpackages;
    }


    /**
     * Read installed packages.
     * @return map Map $[ "packagename" : "version" ]
     */
    global define map ReadActualInstalledPackages() ``{
	if (Mode::config == true)
	{
	    return $[];
	}

	// read info about installed packages
	map info = SCR::Read(.targetpkg.info);	// TODO FIXME: use Pkg:: instead!

	map ret = $[];

	if (info != nil)
	{
	    foreach(string name, list data, info, ``{
		    string version = select(data, 0, "");

		    ret = add(ret, name, version);
		}
	    );
	}

	return ret;
    }

    /**
     * Clear cache of installed packages. Next use of GetActualInstalledPackages() function will reread installed packages.
     */
     global define void ClearInstalledPackagesCache()
     {
	 actualinstalledpackages = nil;
     }

    /**
     * Get all restore settings - for use by autoinstallation
     * @param settings The YCP structure to be imported
     * @return boolean True on success
     */

    global define boolean Import(map settings) ``{
	if (settings == nil)
	{
	    return false;
	}

	Set(settings);

	return true;
    }


    /**
     * Set selection in _auto client and display properties of archive
     * @param settings Restoration selection
     */

    global define void SetSelectionProperty(map settings) ``{
	// set selection for this archive and display archive propertyt
	foreach(string package, map info, settings, ``{
		y2debug("setting selection: package:%1, selection:%2)", package, info);

		if (package == nopackage_id)
		{
		    package = "";
		}

		SetRestoreSelection(package, info);
	    }
	);
    }



    /**
     * Set settings
     * @param settings Map with settings: start lilo, run SuSEconfig, restore RPM db
     */

    global define void Set(map settings) ``{
	y2milestone("Using settings: %1", settings);
	runbootloader = lookup(settings, "runbootloader", true);
	runSuSEconfig = lookup(settings, "runSuSEconfig", true);
	restoreRPMdb = lookup(settings, "restoreRPMdb", false);

	list archiveslist = settings["archives"]:[];
	// read archives
	if (size(archiveslist) > 0)
	{
	    foreach(string a, archiveslist, ``{
		    Restore::Read(a);
		}
	    );
	}
	else
	{
	    // set unconfigured state
	    inputname = "";
	    archive_info = $[];
	}

	// set restore selection
	SetSelectionProperty(settings["selection"]:$[]);
    }

    /**
     * Dump the restore settings to a single map - for use by autoinstallation.
     * @return map Dumped settings (later acceptable by Import ())
     */
    global define map Export() ``{

	map selection = $[];

	if (inputname == "")
	{
	    // unconfigured
	    return $[];
	}

	foreach(string package, map info, archive_info, ``{
		string sel_type = lookup(info, "sel_type", " ");
		list sel_file = lookup(info, "sel_file", []);

		if (package == "")
		{
		    package = nopackage_id;
		}

		selection = add(selection, package, $[ "sel_type" : sel_type, "sel_file" : sel_file ]);
	    }
	);

	return $[
	    "archives"		: prepend(inputvolumes, inputname),
	    "runbootloader"		: runbootloader,
	    "runSuSEconfig"	: runSuSEconfig,
	    "restoreRPMdb"	: restoreRPMdb,
	    "selection"		: selection
	];
    }

    /**
     * Read contents of archive
     * @param input File name of backup archive. File on NFS server is 'nfs://server:/dir/file.tar', local file: 'file:///dir/file.tar' (prefix is file://, directory is /dir)
     * @return boolean True if archive was succesfully read, otherwise false (file does not exist, not tar archive, broken archive, archive not created by Backup module, ...)
     */
    global define boolean Read(string input) ``{

	// umount old mount point
	Umount();

	if (tempdir == "")
	{
	    tempdir = SCR::Read(.target.tmpdir);
	}

	inputname = input;

	if (Mode::test == true)
	{
	    filename = "/tmp/dummy.tar";

	    archivefiles = [ "info/", "info/date", "info/comment", "info/files",
		"info/packages_info", "info/installed_packages", "info/hostname",
		"NOPACKAGE-20020509-0.tar.gz", "kdebase3-3.0-19-20020509-0.tar.gz", "lprng-3.8.5-49-20020509-0.tar.gz",
		"mozilla-0.9.8-54-20020509-0.tar.gz", "netcfg-2002.3.20-0-20020509-0.tar.gz" ];

	    date = "13.01.2002 14:25";
	    comment = "Some comments";
	    hostname = "linux.local";

	    installedpkgs = $["netcfg" : "2002.3.20-0", "lprng" : "3.8.5-49", "kdebase3" : "3.0-19", "gnome-applets" : "1.4.0.5-98", "mozilla" : "0.9.8-54"];
	    actualinstalledpackages = $["ggv" : "1.1.93-167", "netcfg" : "2002.3.20-0", "lprng" : "3.8.5-49", "kdebase3" : "3.0-19", "aterm" : "0.4.0"];

	    archive_info = $["" : $["descr" : "Files not owned by any package", "files":["/.qt/", "/dev/dvd", "/dev/cdrom"], "sel_type" : "X" ],
		"kdebase3" : $["descr" : "KDE base package: base system", "files":["/etc/opt/kde3/share/config/kdm/kdmrc"], "prefix" : "", "sel_type" : "X", "vers" : "3.0-19"],
		"mozilla" : $["descr" : "Open Source WWW browser", "files" : ["/opt/mozilla/chrome/installed-chrome.txt"], "prefix" : "", "sel_type" : "X", "vers" : "0.9.8-54"],
		"lprng" : $["descr" : "LPRng Print Spooler", "files" : ["/etc/init.d/lpd"], "prefix" : "", "sel_type" : "X", "vers" : "3.8.5-49"],
		"netcfg":$["descr" : "Network configuration files in /etc", "files" : ["/etc/HOSTNAME", "/etc/defaultdomain", "/etc/exports", "/etc/hosts"], "prefix":"", "sel_type":"X", "vers":"2002.3.20-0"]
		];

	    // set default selection
	    archive_info = mapmap(string p, map i, archive_info, ``{
		    i = add(i, "sel_type", (p == "") ? "X" : ((haskey(actualinstalledpackages, p)) ? "X" : " "));

		    return [p, i];
		}
	    );

	    return true;
	}

	// mount source
	map mresult = MountInput(input);

	y2debug("MountInput: %1", mresult);

	if (lookup(mresult, "success", false) == false)
	{
	    // error message
	    Report::Error(_("Cannot mount file system."));
	    return false;
	}

	filename = lookup(mresult, "file", "");
	mountpoint = lookup(mresult, "mpoint", "");

	y2milestone("filename: %1", filename);
	y2milestone("mountpoint: %1", mountpoint);

	// get archive contents
	map result = SCR::Execute(.target.bash_output, "/bin/tar -t -f " + filename);

	// check tar exit value
	if (lookup(result, "exit", -1) != 0)
	{
	    // tar failed, check whether file is first volume of multivolume archive
	    volumeparts = [];
	    map addresult = AddVolume(filename);

	    if (lookup(addresult, "success", false) == true)
	    {
		// read archive info from local copy (should be faster)
		filename = select(volumeparts, 0, "");
	    }
	    else
	    {
		// error message
		Report::Error(_("Cannot read archive file.
It is not a tar archive or it is broken.
"));
		return false;
	    }

	}
	else
	{
	    // if archive is not local or NFS file copy it to tempdir (even if it isn't multi volume),
	    // so removable device (e.g. CD-ROM) can be used for package installation later
	    if (substring(input, 0, size("file://")) != "file://" && substring(input, 0, size("nfs://")) != "nfs://")
	    {
		// copy archive to local file
		map copy = CopyVolume(filename, 0);

		if (lookup(copy, "success", false) == true)
		{
		    // set file name to local copy
		    filename = lookup(copy, "file", "");

		    // umount file system
		    Umount();
		}
		else
		{
		    // error message: copy failed
		    Report::Error(_("Cannot copy archive file
to temporary directory.
"));
		    return false;
		}
	    }
	}

	// get list of files
	archivefiles = splitstring(lookup(result, "stdout", ""), "\n");
	archivefiles = filter(string f, archivefiles, ``{return f != "" && f != nil;});

	if (!(contains(archivefiles, "info/files") && contains(archivefiles, "info/packages_info") && contains(archivefiles, "info/installed_packages")))
	{
	    // archive doesn't contain files from backup - file is not backup archive or not first volume of multi volume archive
	    y2error("Archive does not contain 'info/files' or 'info/packages_info' or 'info/installed_packages' file!");

	    // error message
	    Report::Error(_("Archive does not contain required files.
It was probably not created by the backup module.
"));
	    return false;
	}

	y2debug("read archivefiles: %1", archivefiles);

	string infofiles = "info/comment info/hostname info/date info/installed_packages info/files info/packages_info";

	// unpack info files
	result = SCR::Execute(.target.bash_output, "/bin/tar -C " + tempdir + " -x -f " + filename + " " + infofiles);

	date = SCR::Read(.target.string, tempdir + "/info/date");
	comment = SCR::Read(.target.string, tempdir + "/info/comment");
	hostname = SCR::Read(.target.string, tempdir + "/info/hostname");

	// read archive contents file
	string archivefs = SCR::Read(.target.string, tempdir + "/info/files");

	if (archivefs != nil)
	{
	    archivefiles = splitstring(archivefs, "\n");
	    archivefiles = filter(string pk, archivefiles, ``{return pk != "" && pk != nil;});
	}

	y2debug("final archivefiles: %1", archivefiles);

	// read installed packages
	string installedpkgs_str = SCR::Read(.target.string, tempdir + "/info/installed_packages");

	// convert string to list
	list installedpkgs_list = splitstring(installedpkgs_str, "\n");
	installedpkgs_list = filter(string pk, installedpkgs_list, ``{return pk != "" && pk != nil;});

	// convert list to map (key - package name, value - package version)
	installedpkgs = listmap(string fullname, installedpkgs_list, ``{
		string version = regexpsub(fullname, ".*-(.*-.*)", "\\1");
		string name = substring(fullname, 0, size(fullname) - size(version) - 1);

		return [name, version];
	    }
	);

	string pkginfo_str = SCR::Read(.target.string, tempdir + "/info/packages_info");

	list pkginfo = splitstring(pkginfo_str, "\n");
	pkginfo = filter(string pk, pkginfo, ``{return pk != "" && pk != nil;});

	string actualpkg = nil;
	string actualversion = "";
	string prefix = "";
	list pkfiles = [];

	string packagestring = "Package: ";
	string nopackagestring = "Nopackage:";
	string prefixstring = "Installed: ";

	foreach(string line, pkginfo, ``{
		if (substring(line, 0, size(packagestring)) == packagestring || line == nopackagestring)
		{
		    if (actualpkg != nil)
		    {
			// read selection type - in autoinstall-config mode it already exists
			string selt = archive_info[actualpkg, "sel_type"]:" ";
			archive_info = add(archive_info, actualpkg, $[ "vers" : actualversion, "files" : pkfiles, "prefix" : prefix, "sel_type" : selt ]);
		    }

		    pkfiles = [];
		    prefix = "";

		    if (line == nopackagestring)
		    {
			actualpkg = "";
			actualversion = "";
		    }
		    else
		    {
			string full = substring(line, size(packagestring));

			actualversion = regexpsub(full, ".*-(.*-.*)", "\\1");
			actualpkg = substring(full, 0, size(full) - size(actualversion) - 1);
		    }
		}
		else if (substring(line, 0, size(prefixstring)) == prefixstring)
		{
		    prefix = substring(line, size(prefixstring));

		    if (prefix == "(none)")
		    {
			prefix = "";
		    }
		}
		else if (substring(line, 0, 1) == "/")
		{
		    pkfiles = add(pkfiles, line);
		}
		else
		{
		    y2error("Unknown line in file packages_info: %1", line);
		}
	    }
	);

	// add last package info
	if (actualpkg != nil)
	{
	    // read selection type - in autoinstall-config mode it already exists
	    string selt = archive_info[actualpkg, "sel_type"]:" ";

	    archive_info = add(archive_info, actualpkg, $[ "files" : pkfiles, "prefix" : prefix, "vers" : actualversion, "sel_type" : selt ]);
	}

	// read actual installed packages

	GetActualInstalledPackages();

	map mismatched = GetMismatchedPackages();

	// add package descriptions and default selection
	archive_info = mapmap(string p, map i, archive_info, ``{
	        // decription of files not owned by any package
		string descr = (p == "") ? _("Files not owned by any package") : Pkg::PkgSummary(p);
		map t = add(i, "descr", descr);

		string sel_type = " ";

		if (Mode::config == false)
		{
		    // set default selection to "X" (package is installed) or " " (package is not installed)
		    if (p == "")
		    {
			// set "no package" default value to "X"
			sel_type = "X";
		    }
		    else
		    {
			sel_type = (haskey(actualinstalledpackages, p) && !haskey(mismatched, p)) ? "X" : " ";
		    }
		}
		else
		{
		    // in autoinstall-config mode leave preselected value
		    sel_type = i["sel_type"]:" ";
		}

		t = add(t, "sel_type", sel_type);

		return [p, t];
	    }
	);

	y2milestone("values from archive: date=%1, comment=%2, hostname=%3", date, comment, hostname);

	y2debug("installed packages at backup time: %1", installedpkgs);
	y2debug("actual installed packages: %1", GetActualInstalledPackages());

	return true;
    }


    /**
     * Return restore configuration
     * @return map Map $[ "packagename" : $["vers" : "version", "files" : ["files in the archive"], "prefix" : "installprefix", "descr" : "Short description", "sel_type" : "X", "sel_file" : ["selected files to restore"] ] ], possible values for "sel_type" key are: "X" - restore all files from archive, " " - do not restore this package, "P" - partial restore, restore only selected files at "sel_file" key. Package name "" means files not owned by any package.
     */
    global define map GetArchiveInfo() ``{
	return archive_info;
    }

    /**
     * Change restore selection of package.
     * @param pkgname Name of package
     * @param selection New restore selection for package, map  $[ "sel_type" : "X", "sel_file" : ["files"] ]
     */
    global define void SetRestoreSelection(string pkgname, map selection) ``{
	if (haskey(archive_info, pkgname) == false)
	{
	    y2warning("Package %1 is not in archive, cannot be restored!", pkgname);
	}
	else
	{
	    string sel_type = lookup(selection, "sel_type", " ");
	    list sel_file = [];
	    map pkginfo = lookup(archive_info, pkgname, $[]);

	    if (sel_type == "P")
	    {
		sel_file = lookup(selection, "sel_file", []);
	    }
	    else if (sel_type != "X" && sel_type != " ")
	    {
		y2warning("Unknown selection type '%1' for package '%2'", sel_type, pkgname);
	    }

	    pkginfo = add(pkginfo, "sel_type", sel_type);
	    pkginfo = add(pkginfo, "sel_file", sel_file);

	    archive_info = add(archive_info, pkgname, pkginfo);
	}
    }


    /**
     * Return number of packages which will be restored from archive
     * @return integer Total selected packages
     */
    global define integer TotalPackagesToRestore() ``{
	integer total = 0;

	// filter out unselected packages
	foreach(string p, map info, archive_info, ``{
		string sel_type = lookup(info, "sel_type", " ");

		if (sel_type == "X" || sel_type == "P")
		{
		    total = total + 1;
		}
	    }
	);

	return total;
    }


    /**
     * Return number of files which will be unpacked from archive
     * @return integer Total selected files
     */
    global define integer TotalFilesToRestore() ``{
	integer total = 0;

	// filter out unselected packages and compute total restored files
	foreach(string p, map info, archive_info, ``{
		string sel_type = lookup(info, "sel_type", " ");

		if (sel_type == "X")
		{
		    total = total + size(lookup(info, "files", []));
		}
		else if (sel_type == "P")
		{
		    total = total + size(lookup(info, "sel_file", []));
		}
	    }
	);

	return total;
    }

    /**
     * Restore files from archive
     * @param abort This block is periodically evaluated, if it evaluates to true restoration will be aborted. It should be something like ``{return UI::PollInput () == `abort;} if UI exists or ``{ return false; } if there is no UI (abort will not be possible).
     * @param progress Id of progress bar or nil.
     * @param targetdir Directory to which files from archive will be upacked
     * @return map Map $[ "aborted" : boolean, "restored" : [ "restored file" ], "failed" : [ "failed file" ] ]
     */

    global define map Write(block abort, symbol progress, string targetdir) ``{

	map restore = archive_info;
	integer total = 0;
	integer restoredpackages = 0;
	list restoredfiles = [];
	list failedfiles = [];
	boolean aborted = false;

	// filter out unselected packages and compute total restored files
	restore = filter(string p, map info, restore, ``{
		string sel_type = lookup(info, "sel_type", " ");

		if (sel_type == "X")
		{
		    total = total + size(lookup(info, "files", []));
		    return true;
		}
		else if (sel_type == "P")
		{
		    total = total + size(lookup(info, "sel_file", []));
		    return true;
		}
		else
		{
		    return false;
		}
	    }
	);

	y2milestone("%1 files will be restored from archive", total);

	// get list of all packages to restore (while cycle is used, because foreach cannot be stopped)
	list packages = [];
	foreach(string package, map info, restore, ``{
		packages = add(packages, package);
	    }
	);

	integer i = 0;
	symbol ret = `next;

	while (i < size(packages))
	{
	    string package = select(packages, i, "nonexistingpackage");
	    map info = lookup(restore, package, $[]);
	    // progress bar label
	    string label = (package == "") ? _("Restoring files not owned by any package...") :
		// progress bar label - %1 is package name
		sformat(_("Restoring package %1..."), package);
	    string sel_type = lookup(info, "sel_type", "");

	    if (progress != nil)
	    {
		// update name of package
		UI::ChangeWidget(`id(progress), `Label, label);
		UI::ChangeWidget(`id(progress), `Value, i);
	    }

	    if (Mode::test == true)
	    {
		// delay
		sleep(300);
	    }
	    else
	    {
		// get subarchive name
		string name = (package == "") ? "NOPACKAGE" : package + "-" + lookup(info, "vers", "");
		string fileinarchive = "";

		foreach(string f, archivefiles, ``{
			if (regexpmatch(f, "^" + name + "-........-.\\.tar.*") == true)
			{
			    y2debug("package %1 is in archive file %2", package, f);
			    fileinarchive = f;
			}
		    }
		);

		if (fileinarchive == "")
		{
		    y2error("Can't find subarchive for package %1", package);
		}
		else
		{
		    // unpack subarchive at background
		    boolean started  = nil;

		    if (IsMultiVolume() == true)
		    {
			string param = " ";

			foreach(string f, volumeparts, ``{
				param = param + "-f " + f + " ";
			    }
			);

			string command = "export LC_ALL=C; echo q | /bin/tar -C " + tempdir + " -x -M " + param + fileinarchive + " 2> /dev/null";
			y2debug("Running command: %1", command);

			started = SCR::Execute(.background.run, command);
		    }
		    else
		    {
			started  = SCR::Execute(.background.run, "export LC_ALL=C; /bin/tar -C " + tempdir + " -x -f " + filename + " " + fileinarchive);
		    }

		    // abort test cycle
		    while(SCR::Read(.background.isrunning))
		    {
			sleep(100);

			aborted = eval(abort);

			if (aborted == true)
			{
			    y2warning("Restoration aborted!");
			    SCR::Execute(.background.kill, nil);	// kill subprocess
			    break;
			}
		    }

		    // break all packages cycle
		    if (aborted == true)
		    {
			break;
		    }

		    // set compression parameter
		    string compress = "";
		    if (regexpmatch(fileinarchive, ".*\.tar\.gz$") == true)
		    {
			compress = "-z";
		    }
		    else if (regexpmatch(fileinarchive, ".*\.tar\.bz2$") == true)
		    {
			compress = "-j";
		    }

		    string RPMdb = (restoreRPMdb) ? "" : "--exclude var/lib/rpm";

		    // files to unpack, "" means all files
		    string unpackfiles = "";

		    // select files to unpack
		    if (sel_type == "P")
		    {
			// strip leading '/'
			foreach(string f, lookup(info, "sel_file", []), ``{
				if (size(f) > 1 && substring(f, 0, 1) == "/")
				{
				    unpackfiles = unpackfiles + " " + substring(f, 1);
				}
			    }
			);
		    }

		    // start subprocess
		    started = SCR::Execute(.background.run_output, "export LC_ALL=C; /bin/tar -C " + targetdir + " " + compress + " -x -v -f " + tempdir + "/" + fileinarchive + " " + RPMdb + " " + unpackfiles + " 2> " + tempdir + "/tar.stderr > " + tempdir + "/tar.stdout");

		    while(SCR::Read(.background.isrunning) == true)
		    {
			sleep(100);	// small delay

			aborted = eval(abort);

			if (aborted == true)
			{
			    y2warning("Restoration aborted!");
			    SCR::Execute(.background.kill, nil);	// kill subprocess
			    break;
			}
		    }

		    // read restored files
		    list stdout =  splitstring(SCR::Read(.target.string, tempdir + "/tar.stdout"), "\n");

		    // remove empty lines
		    stdout = filter(`line, stdout, ``{return size(line) > 0;});
		    restoredfiles = merge(restoredfiles, stdout);

		    // read failed files
		    list stderr =  splitstring(SCR::Read(.target.string, tempdir + "/tar.stderr"), "\n");

		    // remove empty lines
		    stderr = filter(`line, stderr, ``{return size(line) > 0;});
		    integer packagefailedfiles = 0;

		    if (stderr != [])
		    {
			y2warning("stderr: %1", stderr);
		    }

		    // add file names to failedfiles
		    foreach(string line, stderr, ``{
			    y2warning("line: %1", line);

			    if (line != nil && line != "")
			    {
				string file = regexpsub(line, "tar: (.*):.*:.*", "\\1");

				if (file != nil)
				{
				    add(failedfiles, file);
				    packagefailedfiles = packagefailedfiles + 1;

				    y2warning("Restoration of file %1 failed", file);
				}
			    }
			}
		    );

		    // package restoration failed
		    if (packagefailedfiles == size(restoredfiles))
		    {
			y2warning("failed package: %1", package);
		    }
		    else
		    {
			restoredpackages = restoredpackages + 1;
		    }

		    if (aborted == true)
		    {
			break;
		    }
		}
	    }

	    i = i + 1;
	}

	// sort list of restored files and remove duplicates (caused by multiple unpacking)
	restoredfiles = toset(restoredfiles);

	// remove failed files
	restoredfiles = filter(string f, restoredfiles, ``{
		return !contains(failedfiles, f);
	    }
	);

	if (runbootloader == true && progress != nil)
	{
	    // progess bar label
	    UI::ChangeWidget(`id(progress), `Label, _("Configuring boot loader..."));
	    UI::ChangeWidget(`id(progress), `Value, i);
	}

	boolean bootload = Bootloader();

	return $[ "aborted" : aborted, "restored" : restoredfiles, "failed" : failedfiles, "packages" : restoredpackages, "bootloader" : bootload ];
    }

    /**
     * Read next volume of multi volume archive
     * @param input Archive name in URL-like syntax
     * @return map Map $[ "success" : boolean (true on success), "lastvolume" : boolean (true if archive is last volume) ]
     */

    global define map ReadNextVolume(string input) ``{

	// umount mounted file system
	Umount();

	boolean ret = false;
	boolean last = true;

	// mount source
	map mount = MountInput(input);

	if (lookup(mount, "success", false) == true)
	{
	    mountpoint = lookup(mount, "mpoint", "");

	    // add mounted file
	    map addvol =  AddVolume(lookup(mount, "file", "dummy"));

	    ret = lookup(addvol, "success", false);
	    last = lookup(addvol, "lastvolume", true);

	    if (ret == true)
	    {
		inputvolumes = add(inputvolumes, input);
	    }
	}

	return $[ "success" : ret, "lastvolume" : last ];
    }


    /**
     * Add next volume - check volume, copy volume to the temp. dir.
     * @param file File name of volume
     * @return map Map $[ "success" : boolean (true on success), "lastvolume" : boolean (true if archive is last volume) ]
     */

    define map AddVolume(string file) ``{

	integer vol = size(volumeparts) + 1;
	boolean success = false;

	// check if file is next volume
	map check = CheckVolume(file, vol);

	y2debug("CheckVolume(%1, %2): %3", file, vol, check);

	if (lookup(check, "success", false) == true)
	{

	    // copy file to temporary directory
	    map copy = CopyVolume(file, vol);
	    y2debug("CopyVolume(%1, %2): %3", file, vol, copy);

	    if (lookup(copy, "success", false) == true)
	    {
		string partname = lookup(copy, "file", "");

		volumeparts = add(volumeparts, partname);

		success = true;
	    }
	}

	return $[ "success" : success, "lastvolume" : lookup(check, "lastvolume", true) ];
    }

    /**
     * Check if volume number in archive is equal to expected volume number
     * @param filename Volume file name
     * @param num Number of volume
     * @return map Map $[ "success" : boolean (true on success), "lastvolume" : boolean (true if archive is last volume) ]
     */

    define map CheckVolume(string filename, integer num) ``{
	boolean success = false;
	boolean lastvolume = true;

	// test if archive is multi volume - use -v parameter to get file descriptions
	map detailresult = SCR::Execute(.target.bash_output, "/bin/tar -v -t -f " + filename);

	list stdout = splitstring(lookup(detailresult, "stdout", ""), "\n");
	string firstline = select(stdout, 0, "");

	y2debug("Test: First line: %1", firstline);

	// check if first line is volume label number num
	if (regexpmatch(firstline, sformat("V--------- .* YaST2 backup: Volume %1--.*--", num)) == true)
	{
	    success = true;
	}

	return $[ "success" : success, "lastvolume" : (lookup(detailresult, "exit", "") == 0) ];
    }


    /**
     * Test all volumes together
     * @return boolean True: all volumes are OK, false: an error occured
     */

    global define boolean TestAllVolumes() ``{
	boolean ret = false;

	if (size(volumeparts) > 0)
	{
	    string param = "";

	    foreach(string f, volumeparts, ``{
		    param = param + "-f " + f + " ";
		}
	    );

	    // echo 'q' to tar stdin - if error occurs tar asks for next volume, q means quit
	    integer exit = SCR::Execute(.target.bash, "echo q | /bin/tar -t -M " + param);
	    y2milestone("Test result: %1", exit);

	    ret = (exit == 0);
	}

	return ret;
    }

    /**
     * Copy volume to the local temporary directory
     * @param filename Source file
     * @param num Number of volume
     * @return map Map $[ "success" : boolean (true on success), "file" : string (file name in the temporary directory) ]
     */

    define map CopyVolume(string filename, integer num) ``{
	boolean success = false;
	string tmpfile = tempdir + "/" + sformat("%1", num) + ".tar";

	// copy multi volume part to temp directory
	integer exit = SCR::Execute(.target.bash, "/bin/cp " + filename + " " + tmpfile);

	if (exit == 0)
	{
	    success = true;
	}
	else
	{
	    y2error("Copy failed");
	}

	return $[ "success" : success, "file" : tmpfile ];
    }


    /**
     * Activate bootloader configuration if requested.
     * @return boolean true on success
     */
    global define boolean Bootloader() ``{
	boolean ret = nil;

	if (runbootloader == true && Mode::test == false)
	{
	    if (boot() == "grub")
	    {
		y2milestone("starting grub configuration");
		ret = (DoGrub() == 0);
		y2milestone("grub configured: %1", ret);

		if (ret == false)
		{
		    // error message - grub bootloader failed
		    Report::Error(_("Grub configuration failed.
Boot loader was not updated."));
		}
	    }
	    else
	    {
		y2milestone("starting lilo configuration");
		ret = (DoLilo() == 0);
		y2milestone("lilo configured: %1", ret);

		if (ret == false)
		{
		    // error message - lilo failed
		    Report::Error(_("LILO utility failed.
Boot configuration was not updated.
"));
		}
	    }
	}

	return ret;
    }

    /**
     * Mount input source
     * @param input File in URl-like syntax
     * @return map Map $[ "success" : boolean (true on success), "mpoint" : string (mount point), "file" : string (file name on the local system) ];
     */

    global define map MountInput(string input) ``{

	y2milestone("MountInput(%1)", input);

	boolean success = false;
	string mpoint = "";
	string file = "";

	//parse 'input'
	string nfsprefix = "nfs://";
	string fileprefix = "file://";
	string devprefix = "dev://";
	string cdprefix = "cd";		// cd prefix can be "cd://" (equivalent to "cd0://"), "cd1://", "cd2://", ... number of CD identification
	string fdprefix = "fd";

	if (substring(input, 0, size(nfsprefix)) == nfsprefix)
	{
	    string tail = substring(input, size(nfsprefix));
	    integer pos = findfirstof(tail, ":");

	    string nfs_server = substring(tail, 0, pos);
	    string nfs_file = substring(tail, pos + 1);

	    y2milestone("NFS source - server: %1  file: %2", nfs_server, nfs_file);

	    map mountresult = mountNFS(nfs_server, nfs_file);

	    if (lookup(mountresult, "mounted", false) == false)
	    {
		y2error("Cannot read source '%1' - NFS mount failed", input);
	    }
	    else
	    {
		mpoint = lookup(mountresult, "mountpoint", "");
		file = mpoint + "/" + lookup(mountresult, "file", "");
		success = true;

		y2milestone("mpoint: %1", mpoint);
		y2milestone("file: %1", file);
	    }
	}
	else if (substring(input, 0, size(devprefix)) == devprefix)
	{
	    string tail = substring(input, size(devprefix));
	    integer pos = findfirstof(tail, ":");

	    string device = substring(tail, 0, pos);
	    string devfile = substring(tail, pos + 1);

	    y2milestone("Device source - device: %1  file: %2", device, devfile);

	    map mountresult = mountDevice(device);

	    if (lookup(mountresult, "mounted", false) == false)
	    {
		y2error("Cannot read source '%1' - device mount failed", input);
	    }
	    else
	    {
		mpoint = lookup(mountresult, "mpoint", "");
		file = mpoint + "/" + devfile;
		success = true;
	    }
	}
	else if (substring(input, 0, size(fileprefix)) == fileprefix)
	{
	    file = substring(input, size(fileprefix));
	    y2milestone("FILE source: %1", file);

	    success = true;
	}
	else if (substring(input, 0, size(cdprefix)) == cdprefix)
	{
	    // get CD drive index
	    string cdindex = regexpsub(input, "cd0*([0-9]*)://(.*)", "\\1");
	    string cdfile = regexpsub(input, "cd([0-9]*)://(.*)", "\\2");

	    if (cdindex == nil || cdindex == "")
	    {
		cdindex = "0";
	    }

	    if (cdfile == nil)
	    {
		cdfile = "";
	    }

	    y2milestone("CD source - drive: %1  file: %2", cdindex, cdfile);

	    // mount CD
	    map mountresult = mountCD(tointeger(cdindex));

	    if (lookup(mountresult, "mounted", false) == false)
	    {
		y2error("Cannot read source '%1' - mount failed", input);
	    }
	    else
	    {
		mpoint = lookup(mountresult, "mpoint", "");
		file = mpoint + "/" + cdfile;
		success = true;
	    }
	}
	else if (substring(input, 0, size(fdprefix)) == fdprefix)
	{
	    // get floppy index
	    string fdindex = regexpsub(input, "fd0*([0-9]*)://(.*)", "\\1");
	    string fdfile = regexpsub(input, "fd([0-9]*)://(.*)", "\\2");

	    if (fdindex == nil || fdindex == "")
	    {
		fdindex = "0";
	    }

	    if (fdfile == nil)
	    {
		fdfile = "";
	    }

	    y2milestone("Floppy source - drive: %1  file: %2", fdindex, fdfile);

	    // mount floppy
	    map mountresult = mountFloppy(tointeger(fdindex));

	    if (lookup(mountresult, "mounted", false) == false)
	    {
		y2error("Cannot read source '%1' - mount failed", input);
	    }
	    else
	    {
		mpoint = lookup(mountresult, "mpoint", "");
		file = mpoint + "/" + fdfile;
		success = true;
	    }
	}
	else
	{
	    y2error("Unknown prefix in input: %1", input);
	}

	return $[ "success" : success, "mpoint" : mpoint, "file" : file ];
    }


    /**
     * Access to file on NFS server
     * @param server Name or IP adress of NFS server
     * @param file File on the server
     * @return map $[ "mounted" : boolena (true on success), "mountpoint" : string (mount point) , "file" : string (file name), "server_dir" : string (directory on the server) ]
     */

    define map mountNFS(string server, string file) ``{
	integer pos = findlastof(file, "/");

	if (pos != nil)
	{
	    string dir = substring(file, 0, pos);
	    string f = substring(file, pos + 1);

	    string tmpdir = SCR::Read(.target.tmpdir);
	    string mpoint = tmpdir + "/nfs";

	    if (dir == "" || dir == nil)
	    {
		dir = "/";
	    }

	    // create mount point directory
	    SCR::Execute(.target.mkdir, mpoint);

	    y2milestone("dir: %1", dir);
	    y2milestone("file: %1", f);
	    y2milestone("mpoint: %1", mpoint);

	    boolean result = SCR::Execute(.target.mount, [server + ":" + dir, mpoint], "-t nfs");

	    return $[ "mounted" : result, "mountpoint" : mpoint , "file" : f, "server_dir" : dir ];
	}

	return $[ "mounted" : false ];
    }


    /**
     * Access to file on CD
     * @param cdindex Index of CD drive (in list SCR::Read(.probe.cdrom))
     * @return map $[ "mounted" : boolena (true on success), "mpoint" : string (mount point) ]
     */

    define map mountCD(integer cdindex) ``{
	list drives = SCR::Read(.probe.cdrom);

	if (cdindex == nil || cdindex > size(drives) - 1)
	{
	    return $[ "mounted" : false ];
	}

	string cddevice = lookup(select(drives, cdindex, $[]), "dev_name", "/dev/cdrom");
	string tmpdir = SCR::Read(.target.tmpdir);
	string mpoint = tmpdir + "/cd";

	// create mount point directory
	SCR::Execute(.target.mkdir, mpoint);

	boolean result = SCR::Execute(.target.mount, [cddevice, mpoint] );

	return $[ "mounted" : result, "mpoint" : mpoint ];
    }


    /**
     * Access to file on floppy
     * @param fdindex Index of floppy drive (in list SCR::Read(.probe.floppy))
     * @return map $[ "mounted" : boolena (true on success), "mpoint" : string (mount point) ]
     */

    define map mountFloppy(integer fdindex) ``{
	list drives = SCR::Read(.probe.floppy);

	if (fdindex == nil || fdindex > size(drives) - 1)
	{
	    return $[ "mounted" : false ];
	}

	string fddevice = lookup(select(drives, fdindex, $[]), "dev_name", "/dev/fd0");
	string tmpdir = SCR::Read(.target.tmpdir);
	string mpoint = tmpdir + "/fd";

	// create mount point directory
	SCR::Execute(.target.mkdir, mpoint);

	boolean result = SCR::Execute(.target.mount, [fddevice, mpoint] );

	return $[ "mounted" : result, "mpoint" : mpoint ];
    }


    /**
     * Mount device
     * @param device Device file name (e.g. /dev/cdrom, /dev/sda...)
     * @return map Map $[ "mounted" : boolean (true on success), "mpoint" : string (mount point where device was mounted) ];
     */

    define map mountDevice(string device) ``{
	if (device == nil || device == "")
	{
	    return $[ "mounted" : false ];
	}

	string tmpdir = SCR::Read(.target.tmpdir);
	string mpoint = tmpdir + "/mount";

	// create mount point directory
	SCR::Execute(.target.mkdir, mpoint);

	boolean result = SCR::Execute(.target.mount, [device, mpoint] );

	return $[ "mounted" : result, "mpoint" : mpoint ];
    }

    /**
     * Umount mounted file system.
     */

    global define void Umount() ``{
	y2debug("Umount() called");

	if (mountpoint != "" && mountpoint != nil)
	{
	    SCR::Execute(.target.umount, mountpoint);
	    mountpoint = "";
	}
    }

    /**
     * Clear all archive settings
     */

    global define void ResetArchiveSelection() ``{
	// clear selected archive
	filename = "";
	inputname = "";

	// clear content of archive
	archivefiles = [];

	// clear installed packages at backup time
	installedpkgs = $[];

	// clear archive selection
	archive_info = $[];

	// clear archive info
	date = "";
	hostname = "";
	comment = "";

	// clear list of files
	volumeparts = [];

	Umount();
    }


    /**
     * Clear all settings (archive and list of installed packages)
     */

    global define void ResetAll() ``{
	ResetArchiveSelection();

	// clear list of installed packages
	actualinstalledpackages = $[];
    }

    define string RemoveShortCut(string scut) ``{
	return mergestring(splitstring(scut, "&"), "");
    }


    define string yesno(boolean b) ``{
	string ret = "?";

	if (b == true)
	{
	    ret = _("Yes");
	}
	if (b == false)
	{
	    ret = _("No");
	}

	return ret;
    }

    /**
     * Create restore configuration summary. Used in autoinstallation restore module configuration.
     * @return string rich text summary
     */

    global define string Summary() ``{
	if (inputname == "")
	{
	    // not configured yet
	    return Summary::NotConfigured();
	}
	else
	{
	    // Summary text header
	    string archives_info = "<P><B>" + _("Backup archive") + "<B></P>";

	    archives_info = archives_info + "<P>" + inputname;
	    foreach(string vol, inputvolumes, ``{
		    archives_info = archives_info + vol + "<BR>";
		}
	    );
	    archives_info = archives_info + "</P>";

	    // Summary text header
	    string options_info = "<P><B>" + _("Restore options") + "<B></P>";

	    options_info = options_info + "<P>" + RemoveShortCut(_("Activate &boot loader configuration after restoration")) + ":  " + yesno(runbootloader) + "<BR>"
		+ RemoveShortCut(_("Run &SuSEconfig after restoration")) + ":  " + yesno(runSuSEconfig) + "<BR>"
		+ RemoveShortCut(_("Restore RPM &database (if present in archive)")) + ":  " + yesno(restoreRPMdb) + "<BR></P>";

	    string selection_info = "<P><B>" + _("Packages to restore") + "</B></P><P>";

	    foreach(string p, map info, archive_info, ``{
		    if (p == "")
		    {
			p = _("-- No package --");
		    }

		    if (info["sel_type"]:" " != " ")
		    {
			selection_info = selection_info + p + "<BR>";
		    }
		}
	    );

	    selection_info = selection_info + "</P>";

	    return archives_info + options_info + selection_info;
	}
    }

}

