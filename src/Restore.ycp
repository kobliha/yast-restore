/**
 * File:
 *   modules/Restore.ycp
 *
 * Package:
 *   Restore module
 *
 * Summary:
 *   Data for configuration of restore, input and output functions.
 *
 * Authors:
 *   Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of restore.
 * Input and output routines.
 *
 */

{
    // Set the name of the module
    module "Restore";
    import "Progress";
    import "Report";

    textdomain "restore";

    string filename = "";
    // contents of archive
    list archivefiles = [];

    // installed packages at backup time
    list installedpkgs = [];

    // informations stored in archive
    string date = "";
    string hostname = "";
    string comment = "";

    boolean multiarchive = false;

    string tempdir = "";

    global define boolean IsMultiArchive() ``{
	return multiarchive;
    }

    global define string GetArchiveDate() ``{
	return date;
    }

    global define string GetArchivecComment() ``{
	return comment;
    }

    global define string GetArchiveHostname() ``{
	return hostname;
    }

    global define string GetArchiveInstalledPackages() ``{
	return installedpkgs;
    }


    /**
     * Read all restore settings from the SCR
     * @param abort A block that can be called by Read to find
     *	      out whether abort is requested. Returns true if abort
     *	      was pressed.
     * @return boolean True on success
     */
    global define boolean Read (block abort) ``{
	boolean read_aborted = false;

	// TODO FIXME Assign the true texts intead of these
	string caption = _("Initializing restore configuration");
	// TODO FIXME Set the right number of stages
	integer no_of_steps = 4;

	// TODO FIXME Names of real stages
	// We do not set help text here, because it was set outside
	Progress::New ( caption, " ", no_of_steps,
		       [ _("Read the database"),
			 _("Read the previous settings"),
			 _("Detect the devices") ],
		       [ _("Reading the database..."),
			 _("Reading the previous settings..."),
			 _("Detecting the devices..."),
			 _("Finished") ],
		       "" );

	// TODO FIXME: your code here (fill the above mentioned variables)...

	// read database
	Progress::NextStage ();
	read_aborted = eval (abort);
	if (read_aborted)
	{
	    return !read_aborted;
	}
	sleep (500);	// TODO FIXME remove all sleep()
	if (false)	// TODO FIXME read db1 here e.g. if (!SCR::Read (.path.db1))
	{
	    Report::Error (_("Can not read the database1!"));
	}

	// read another database
	Progress::NextStep ();
	read_aborted = eval (abort);
	if (read_aborted)
	{
	    return !read_aborted;
	}
	sleep (500);
	if (false)	// TODO FIXME read db2 here e.g. if (!SCR::Read(.path.db2))
	{
	    Report::Error (_("Can not read the database2"));
	}

	// read current settings
	Progress::NextStage ();
	read_aborted = eval (abort);
	if (read_aborted)
	{
	    return !read_aborted;
	}
	sleep (500);
	if (false)	// TODO FIXME read settings here e.g. if (!SCR::Read(.path.settings))
	{
	    Report::Error (_("Can not read current settings!"));
	}

	// detect devices
	Progress::NextStage ();
	read_aborted = eval (abort);
	if (read_aborted)
	{
	    return !read_aborted;
	}
	sleep (500);
	if (false)	// TODO FIXME detect devices here e.g. if (SCR::Read(.probe.device) == nil)
	{
	    Report::Warning (_("Can not detect device"));
	}

	// increase the progress to "finish"
	Progress::NextStage ();

	return !read_aborted;
    }

    /**
     * Update the SCR according to restore settings
     * @param abort A block that can be called by Write to find
     *	      out whether abort is requested. Returns true if abort
     *	      was pressed.
     * @return boolean True on success
     */
    global define boolean Write (block abort) ``{
	boolean write_aborted = false;
	// TODO FIXME Assign the true texts intead of these
	string caption = _("Saving restore configuration");
	// TODO FIXME And set the right number of stages
	integer no_of_steps = 2;

	// TODO FIXME Names of real stages
	// We do not set help text here, because it was set outside
	Progress::New ( caption, " ", no_of_steps,
		       [ _("Write the settings"),
			 _("Run SuSEconfig") ],
		       [ _("Writing the settings..."),
			 _("Running SuSEconfig..."),
			 _("Finished") ],
		       "" );

	// TODO FIXME: your code here (store the above mentioned variables)...

	// write settings
	Progress::NextStage ();
	write_aborted = eval (abort);
	if (write_aborted)
	{
	    return !write_aborted;
	}
	sleep (500);
	if (false)	// TODO FIXME write setting here e.g. if (!SCR::Write(.path.settings, settings))
	{
	    Report::Error (_("Can not write settings!"));
	}

	// run SuSEconfig
	Progress::NextStage ();
	write_aborted = eval (abort);
	if (write_aborted)
	{
	    return !write_aborted;
	}
	sleep (500);
	if (false)	// TODO FIXME run SuSE config e.g. if (SCR::Execute(.target.bash, "/sbin/SuSEconfig") != 0)
	{
	    Report::Error (_("SuSEconfig script failed!"));
	}

	// increase the progress to "finish"
	Progress::NextStage ();

	return !write_aborted;
    }

    /**
     * Get all restore settings from the first parameter
     * (For use by autoinstallation.)
     * @param settings The YCP structure to be imported.
     * @return boolean True on success
     */
    global define boolean Import (map settings) ``{
	// TODO FIXME: your code here (fill the above mentioned variables)...
	sleep (3000);
	return true;
    }

    /**
     * Dump the restore settings to a single map
     * (For use by autoinstallation.)
     * @return map Dumped settings (later acceptable by Import ())
     */
    global define map Export () ``{
	// TODO FIXME: your code here (return the above mentioned variables)...
	sleep (3000);
	return $[];
    }

    /**
     * Build a textual summary that can be used e.g. in inst_hw_config () or
     * something similar.
     * @return string Summary of the configuration.
     */
    global define string Summary () ``{
	// TODO FIXME: your code here...
	return _("Summary of the configuration...");
    }

    global define boolean ReadArchiveFile(string archivefile) ``{
	// get archive contents
	// TODO use -v flag, filter out Volume label, set multiarchive flag
	map result = SCR::Execute(.target.bash_output, "/bin/tar -t -f " + archivefile);

	// TODO: result from multiarchive is 2!
	if (lookup(result, "exit", -1) != 0)
	{
	    // test if archive is multi volume
	    return false;
	}

	// set file name
	filename = archivefile;

	// get list of files, TODO: multivolume archive
	archivefiles = splitstring(lookup(result, "stdout", ""), "\n");
	archivefiles = filter(string f, archivefiles, ``{return f != "" && f != nil;});

	y2milestone("archivefiles: %1", archivefiles);

	string infofiles = "info/comment info/hostname info/date info/installed_packages";

	if (tempdir == "")
	{
	    tempdir = SCR::Read(.target.tmpdir);
	}

	// unpack info files
	result = SCR::Execute(.target.bash_output, "/bin/tar -C " + tempdir + " -x -f " + filename + " " + infofiles);

	date = SCR::Read(.target.string, tempdir + "/info/date");
	comment = SCR::Read(.target.string, tempdir + "/info/comment");
	hostname = SCR::Read(.target.string, tempdir + "/info/hostname");

	string installedpkgs_str = SCR::Read(.target.string, tempdir + "/info/installed_packages");

	installedpkgs = splitstring(installedpkgs_str, "\n");
	installedpkgs = filter(string pk, installedpkgs, ``{return pk != "" && pk != nil;});

	y2milestone("values from archive: date=%1, comment=%2, hostname=%3", date, comment, hostname);
	y2debug("installed packages at backup time: %1", installedpkgs);

	return true;
    }

    global define map GetArchiveContents() ``{
	if (filename == "" || filename == nil)
	{
	    return nil;
	}

	map result = $[];

	SCR::Execute(.target.bash_output, "/bin/tar -C " + tempdir + " -x -f " + filename + " info/packages_info");

	string pkginfo_str = SCR::Read(.target.string, tempdir + "/info/packages_info");

	list pkginfo = splitstring(pkginfo_str, "\n");
	pkginfo = filter(string pk, pkginfo, ``{return pk != "" && pk != nil;});

	string actualpkg = nil;
	string prefix = "";
	list pkfiles = [];

	string packagestring = "Package: ";
	string nopackagestring = "Nopackage:";
	string prefixstring = "Installed: ";

	foreach(string line, pkginfo, ``{
		if (substring(line, 0, size(packagestring)) == packagestring || line == nopackagestring)
		{
		    if (actualpkg != nil)
		    {
			result = add(result, actualpkg, $[ "files" : pkfiles, "prefix" : prefix ]);
		    }

		    pkfiles = [];
		    prefix = "";

		    actualpkg = (line == nopackagestring) ? "" : substring(line, size(packagestring));
		}
		else if (substring(line, 0, size(prefixstring)) == prefixstring)
		{
		    prefix = substring(line, size(prefixstring));

		    if (prefix == "(none)")
		    {
			prefix = "";
		    }
		}
		else if (substring(line, 0, 1) == "/")
		{
		    pkfiles = add(pkfiles, line);
		}
		else
		{
		    y2error("Unknown line in file packages_info: %1", line);
		}
	    }
	);

	// add last package info
	if (actualpkg != nil)
	{
	    result = add(result, actualpkg, $[ "files" : pkfiles, "prefix" : prefix ]);
	}

	return result;
    }

    global define void InstallPackages(list pkgs, list paths) ``{
    }

    global define void UninstallPackages(list pkgs) ``{
    }

    global define void SetSelectedPackages(list selected, list semiselected) ``{
    }

    global define void RestoreFiles() ``{
    }

    global define void SetRestorePrefix(string prefix) ``{
    }

/*    global define void () ``{
    }*/

}
