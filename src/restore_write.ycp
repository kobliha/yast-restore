/**
 * File:
 *   restore_write.ycp
 *
 * Package:
 *   Restore module
 *
 * Summary:
 *   Writing only client
 *
 * Authors:
 *   Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 *
 * This is a write-only client. It takes its arguments and just
 * write the settings.
 */

/**
 * @param first a map of test settings
 * @return boolean success of operation
 * @example map mm = $[ ... ];
 * @example any ret = CallModule ("restore_write", [ mm ]);
 */

{
    textdomain "restore";

    import "Restore";
    import "Progress";

    include "restore/ui.ycp";

    list args = Args ();
    if ( size (args) <= 0 )
    {
	y2error ("Argument missing - NOT writing, probably some mistake...");
	return false;
    }
    if ( !is ( Args (0), map ) )
    {
	y2error ("Bad argument for restore_write: %1", Args (0));
	return false;
    }

    // The settings are in the first argument
    map settings = select (args, 0, $[]);
    y2milestone("Only writing... (%1)", settings);

    if (! Restore::Import(settings))
    {
	return false;
    }

    // Read archive file
    list volumes = lookup(settings, "archives", []);

    if (size(volumes) == 0)
    {
	return false;
    }

    boolean first = true;
    boolean read = false;
    symbol ui = `dummy;

    foreach(string volume, volumes, ``{

	if (ui == `abort)
	{
	    return;
	}

	if (first == true)
	{
	    read = Restore::Read(volume);
	}
	else
	{
	    read = Restore::ReadNextVolume(volume);
	}

	if (read == false)
	{
	    // read failed, offer manual selection
	    if (UI::YesNoPopup((first == true ? _("Archive file cannot be read.") : _("Archive volume cannot be read.")) + _("\nDo you want to select it manually?"))  == true)
	    {
		// select file
		Wizard::CreateDialog();		// TODO remove this ?
		ui = ArchiveSelectionDialog(!first);

		// ask for more volumes
		if (first == true && Restore::IsMultiVolume() == true)
		{
		    ui = ArchiveSelectionDialog(true);
		}

		UI::CloseDialog();		// TODO remove this ?
	    }
	    else
	    {
		return false;
	    }
	}

	first = false;
    }

    // set selection
    map selection = lookup(settings, "selection", $[]);

    foreach(string package, map info, selection, ``{
	    Restore::SetRestoreSelection(package, info);
	}
    );

    Progress::off ();
    // TODO FIXME: extract files to the root directory
    map ret = Restore::Write( ``{ return false; }, nil, "/tmp/restore" );
    Progress::on ();

    return (size(lookup(ret, "failed", [])) == 0);
}

