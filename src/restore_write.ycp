/**
 * File:
 *   restore_write.ycp
 *
 * Package:
 *   Restore module
 *
 * Summary:
 *   Writing only client
 *
 * Authors:
 *   Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 *
 * This is a write-only client. It takes its arguments and just
 * write the settings.
 */

/**
 * @param first a map of test settings
 * @return boolean success of operation
 * @example map mm = $[ ... ];
 * @example any ret = WFM::CallModule ("restore_write", [ mm ]);
 */

{
    textdomain "restore";

    import "Restore";
    import "Progress";

    include "restore/ui.ycp";

    list args = WFM::Args ();
    if ( size (args) <= 0 )
    {
	y2error ("Argument missing - NOT writing, probably some mistake...");
	return false;
    }
    if ( !is ( WFM::Args (0), map ) )
    {
	y2error ("Bad argument for restore_write: %1", WFM::Args (0));
	return false;
    }

    // The settings are in the first argument
    map settings = select (args, 0, $[]);
    y2milestone("Only writing... (%1)", settings);

    if (! Restore::Import(settings))
    {
	return false;
    }

    // Read archive file
    list volumes = lookup(settings, "archives", []);

    if (size(volumes) == 0)
    {
	return false;
    }

    boolean read = false;
    symbol ui = `dummy;

    integer index = 0;

    foreach(string volume, volumes, ``{
	if (ui == `abort)
	{
	    return;
	}

	if (index == 0)
	{
	    read = Restore::Read(volume);
	}
	else
	{
	    read = lookup(Restore::ReadNextVolume(volume), "success", false);
	}

	if (read == false)
	{
	    // read failed, offer manual selection
	    input = volume;

	    if (UI::YesNoPopup((index == 0 ? _("Archive file cannot be read.") : _("Archive volume cannot be read.")) + _("\nSelect it manually?
")) == true)
	    {
		if (index == 0)
		{
		    input = select(volumes, index, "");
		}
		else
		{
		    // in selection dialog is proposed new file name, use previous one
		    input = select(volumes, index - 1, "");
		}

		// select file
		Wizard::CreateDialog();		// TODO remove this ?
		ui = ArchiveSelectionDialog(index != 0, false);	// false = ask only for one file, others are in 'volumes'

		// ask for more volumes if they are not specified
		if (index == 0 && Restore::IsMultiVolume() == true && size(volumes) == 1)
		{
		    ui = ArchiveSelectionDialog(true, false);
		}

		UI::CloseDialog();		// TODO remove this ?
	    }
	    else
	    {
		return false;
	    }
	}

	index = index + 1;
    });

    // set selection
    map selection = lookup(settings, "selection", $[]);

    foreach(string package, map info, selection, ``{
	    Restore::SetRestoreSelection(package, info);
	}
    );

    Progress::off ();
    map ret = Restore::Write( ``{ return false; }, nil, "/" );
    Progress::on ();

    return (size(lookup(ret, "failed", [])) == 0);
}

