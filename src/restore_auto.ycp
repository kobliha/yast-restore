/**
 * File:
 *   restore_auto.ycp
 *
 * Package:
 *   Restore module
 *
 * Summary:
 *   Client for autoinstallation
 *
 * Authors:
 *   Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param first a map of restore settings
 * @return map edited settings or an empty map if canceled
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = WFM::CallModule ("restore_auto", [ mm ]);
 */

{
    textdomain "restore";

    import "Restore";

    include "restore/ui.ycp";

    list args = WFM::Args();

    Mode::config = true;	// TODO remove this line!

    if (size(args) <= 0)
    {
	y2error("Did not get the settings, probably some mistake...");
	return false;
    }

    if (!is(WFM::Args(0), map))
    {
	y2error("Bad argument for restore_auto: %1", WFM::Args (0));
	return false;
    }

    // The settings are in the first argument
    map settings = select(args, 0, $[]);
    y2milestone("Imported: %1", settings);

    Restore::Import(settings);

    term dialog_contents =
	`VBox(
	  `VSpacing(1),
	  `RichText( `id(`summary), Restore::Summary()),
	  `VSpacing(),
	  `HBox(
	    // push button label - start restore module
	    `PushButton(`id(`configure), _("&Configure restore module")),
	    `HStretch(),
	    // push button label - set unconfigured state
	    `PushButton(`id(`reset), _("Re&set configuration"))
	    )
	  );

    // dialog header - configuration of restore module
    Wizard::SetContents(_("Restore module configuration"),
		dialog_contents, "", true, true);

    symbol ret = nil;
    repeat {
	ret = UI::UserInput();

	if (ret == `configure)
	{
	    symbol config = RestoreAutoSequence();

	    if (config == `finish || config == `next)
	    {
		settings = Restore::Export();
		// update summary
		UI::ChangeWidget(`id(`summary), `Value, Restore::Summary());
	    }
	    else
	    {
		// restore previous settings
		Restore::Import(settings);
	    }
	}
	else if (ret == `reset)
	{
	    // reset settings
	    settings = $[];
	    Restore::Import(settings);

	    // update summary
	    UI::ChangeWidget(`id(`summary), `Value, Restore::Summary());
	}

    } until (ret == `back || ret == `next || ret ==`key || ret ==`abort);

    return [ret, settings];
}


