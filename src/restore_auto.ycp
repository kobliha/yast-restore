/**
 * File:       clients/restore_auto.ycp
 * Package:    Restore module
 * Summary:    Client for autoinstallation
 * Authors:    Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 *
 * This is a client for autoinstallation.
 * Does not do any changes to the configuration.
 *
 */


{

textdomain "restore";

import "Restore";
include "restore/ui.ycp";

/* The main () */
y2milestone("-------------------------------");
y2milestone("Restore autoinst client started");

any ret = nil;
string func = "";
map param = $[];


/* Check arguments */
if (size(Args()) > 0 && is(Args(0), string))
{
    func = WFM::Args(0);

    if (size(Args()) > 1 && is(Args(1), map))
    {
	param = WFM::Args(1);
    }
}

y2milestone("func=%1", func);
y2milestone("param=%1", param);

/* Import data*/
if (func == "Import")
{
    ret = Restore::Import(param);
}
/* create a summary */
else if(func == "Summary")
{
    ret =  Restore::Summary();
}
else if (func == "Reset")
{
    ret = Restore::Import($[]);
}
else if (func == "Change")
{
    // remember settings which will be overwritten at archive selection
    Restore::Import(param);
    ret = RestoreAutoSequence();
}
else if (func == "Export")
{
    ret = Restore::Export();
}
else if (func == "Write")
{
    import "Progress";

    // Read archive file
    list volumes = lookup(param, "archives", []);

    if (size(volumes) == 0)
    {
	return false;
    }

    boolean read = false;
    symbol ui = `dummy;

    integer index = 0;

    foreach(string volume, volumes, ``{
	if (ui == `abort)
	{
	    return;
	}

	if (index == 0)
	{
	    read = Restore::Read(volume);
	}
	else
	{
	    read = lookup(Restore::ReadNextVolume(volume), "success", false);
	}

	if (read == false)
	{
	    // read failed, offer manual selection
	    input = volume;

	    // popup dialog text part 1
	    if (UI::YesNoPopup((index == 0 ? _("Archive file cannot be read.") :
		// popup dialog text part 1
		_("Archive volume cannot be read.")) +
		// popup dialog text part 2
		_("\nSelect it manually?
")) == true)
	    {
		if (index == 0)
		{
		    input = select(volumes, index, "");
		}
		else
		{
		    // in selection dialog is proposed new file name, use previous one
		    input = select(volumes, index - 1, "");
		}

		// select file
		Wizard::CreateDialog();		// TODO remove this ?
		ui = ArchiveSelectionDialog(index != 0, false);	// false = ask only for one file, others are in 'volumes'

		// ask for more volumes if they are not specified
		if (index == 0 && Restore::IsMultiVolume() == true && size(volumes) == 1)
		{
		    ui = ArchiveSelectionDialog(true, false);
		}

		UI::CloseDialog();		// TODO remove this ?
	    }
	    else
	    {
		return false;
	    }
	}

	index = index + 1;
    });

    // set selection
    map selection = param["selection"]:$[];

    foreach(string package, map info, selection, ``{
	    Restore::SetRestoreSelection(package, info);
	}
    );

    Progress::off ();
    map ret = Restore::Write( ``{ return false; }, nil, "/" );
    Progress::on ();

    return (size(lookup(ret, "failed", [])) == 0);
}

/* unknown function */
else
{
    y2error("unknown function: %1", func);
    ret =  false;
}

/* Finish */
y2debug("ret=%1", ret);
y2milestone("Restore autoinit client finished");
y2milestone("--------------------------------");

return ret;
/* EOF */

}

}

